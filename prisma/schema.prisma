generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String           @unique
  password      String
  emailVerified DateTime?
  role          Role             @default(USER)
  totpSecret    String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  auditLogs     AuditLog[]
  garageVins    GarageVin[]
  notifications Notification[]
  orderComments OrderComment[]
  orderRequests OrderRequest[]
  sessions      Session[]
  preferences   UserPreferences?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model UserPreferences {
  id                    String  @id @default(cuid())
  userId                String  @unique
  marketingEmailConsent Boolean @default(false)
  theme                 Theme   @default(dark)
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model GarageVin {
  id        String   @id @default(cuid())
  userId    String
  vin       String
  label     String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, vin])
  @@map("garage_vins")
}

model Category {
  id         String      @id @default(cuid())
  parentId   String?
  name       String
  slug       String      @unique
  path       String
  parent     Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[]  @relation("CategoryHierarchy")
  orderItems OrderItem[]

  @@map("categories")
}

model OrderRequest {
  id                 String          @id @default(cuid())
  shortCode          String          @unique @default(cuid())
  userId             String?
  guestEmail         String?
  vin                String
  status             OrderStatus     @default(PENDING)
  magicLinkHash      String?
  magicLinkExpiresAt DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  addresses          Address[]
  auditLogs          AuditLog[]
  emailLogs          EmailLog[]
  invoiceDetails     InvoiceDetails?
  notifications      Notification[]
  addons             OrderAddon[]
  comments           OrderComment[]
  items              OrderItem[]
  user               User?           @relation(fields: [userId], references: [id])
  payments           Payment[]
  shipment           Shipment?

  @@index([status])
  @@index([vin])
  @@index([guestEmail])
  @@map("order_requests")
}

model OrderItem {
  id             String       @id @default(cuid())
  orderRequestId String
  categoryId     String
  categoryPath   String
  note           String?
  quantity       Int          @default(1)
  photoUrl       String?
  photoWidth     Int?
  photoHeight    Int?
  photoMime      String?
  state          ItemState    @default(REQUESTED)
  chosenOffer    ChosenOffer?
  offers         Offer[]
  category       Category     @relation(fields: [categoryId], references: [id])
  orderRequest   OrderRequest @relation(fields: [orderRequestId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Offer {
  id                String        @id @default(cuid())
  orderItemId       String
  manufacturer      String
  unitPrice         Decimal       @db.Decimal(12, 2)
  quantityAvailable Int
  notes             String?
  updatedAt         DateTime      @updatedAt
  version           Int           @default(1)
  chosenOffers      ChosenOffer[]
  orderItem         OrderItem     @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@map("offers")
}

model ChosenOffer {
  id          String    @id @default(cuid())
  orderItemId String    @unique
  offerId     String
  confirmedAt DateTime?
  offer       Offer     @relation(fields: [offerId], references: [id])
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@map("chosen_offers")
}

model UpsellItem {
  id          String       @id @default(cuid())
  title       String
  imageUrl    String
  price       Decimal      @db.Decimal(12, 2)
  active      Boolean      @default(true)
  tags        String[]
  description String?
  orderAddons OrderAddon[]

  @@map("upsell_items")
}

model OrderAddon {
  id             String       @id @default(cuid())
  orderRequestId String
  upsellItemId   String
  quantity       Int          @default(1)
  orderRequest   OrderRequest @relation(fields: [orderRequestId], references: [id], onDelete: Cascade)
  upsellItem     UpsellItem   @relation(fields: [upsellItemId], references: [id])

  @@unique([orderRequestId, upsellItemId])
  @@map("order_addons")
}

model Address {
  id             String           @id @default(cuid())
  orderRequestId String
  kind           AddressKind
  firstName      String
  lastName       String
  phone          String
  email          String
  line1          String
  line2          String?
  city           String
  postalCode     String
  country        String           @default("PL")
  lockerId       String?
  orderRequest   OrderRequest     @relation(fields: [orderRequestId], references: [id], onDelete: Cascade)
  invoiceDetails InvoiceDetails[]

  @@map("addresses")
}

model InvoiceDetails {
  id             String       @id @default(cuid())
  orderRequestId String       @unique
  required       Boolean      @default(false)
  companyName    String?
  nip            String?
  addressId      String?
  address        Address?     @relation(fields: [addressId], references: [id])
  orderRequest   OrderRequest @relation(fields: [orderRequestId], references: [id], onDelete: Cascade)

  @@map("invoice_details")
}

model Shipment {
  id             String         @id @default(cuid())
  orderRequestId String         @unique
  method         ShippingMethod
  price          Decimal        @db.Decimal(12, 2)
  trackingNumber String?
  createdAt      DateTime       @default(now())
  carrierMeta    Json?
  orderRequest   OrderRequest   @relation(fields: [orderRequestId], references: [id], onDelete: Cascade)

  @@map("shipments")
}

model Payment {
  id             String          @id @default(cuid())
  orderRequestId String
  provider       PaymentProvider
  status         PaymentStatus   @default(INIT)
  amount         Decimal         @db.Decimal(12, 2)
  currency       String          @default("PLN")
  createdAt      DateTime        @default(now())
  notes          String?
  rawPayload     Json?
  orderRequest   OrderRequest    @relation(fields: [orderRequestId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model EmailLog {
  id             String        @id @default(cuid())
  orderRequestId String?
  to             String
  subject        String
  template       String
  createdAt      DateTime      @default(now())
  success        Boolean
  error          String?
  orderRequest   OrderRequest? @relation(fields: [orderRequestId], references: [id])

  @@map("email_logs")
}

model AuditLog {
  id             String        @id @default(cuid())
  orderRequestId String?
  userId         String?
  action         String
  meta           Json?
  createdAt      DateTime      @default(now())
  orderRequest   OrderRequest? @relation(fields: [orderRequestId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Notification {
  id             String               @id @default(cuid())
  userId         String?
  orderRequestId String?
  audience       NotificationAudience
  type           NotificationType
  title          String
  body           String
  isRead         Boolean              @default(false)
  createdAt      DateTime             @default(now())
  orderRequest   OrderRequest?        @relation(fields: [orderRequestId], references: [id])
  user           User?                @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@map("notifications")
}

model OrderComment {
  id             String       @id @default(cuid())
  orderRequestId String
  authorUserId   String?
  authorRole     CommentRole
  body           String
  isInternal     Boolean      @default(false)
  createdAt      DateTime     @default(now())
  author         User?        @relation(fields: [authorUserId], references: [id])
  orderRequest   OrderRequest @relation(fields: [orderRequestId], references: [id], onDelete: Cascade)

  @@map("order_comments")
}

model ShopConfig {
  id                         String   @id @default("singleton")
  freeShippingThreshold      Decimal  @default(0) @db.Decimal(12, 2)
  couponsEnabled             Boolean  @default(true)
  allowPartialAcceptance     Boolean  @default(true)
  requireSameEmailAtCheckout Boolean  @default(true)
  requirePhone               Boolean  @default(true)
  quoteExpiryHours           Int      @default(24)
  shippingFreeQualifiers     String[] @default(["INPOST_LOCKER", "INPOST_COURIER", "DPD", "DHL", "POCZTA"])
  paymentProviders           Json?
  notifications              Json?
  brand                      Json?
  seo                        Json?
  updatedAt                  DateTime @updatedAt

  @@map("shop_config")
}

model Secret {
  id             String   @id @default(cuid())
  key            String   @unique
  valueEncrypted String
  updatedAt      DateTime @updatedAt

  @@map("secrets")
}

enum Role {
  USER
  STAFF
  ADMIN
}

enum Theme {
  dark
  light
}

enum OrderStatus {
  PENDING
  VALUATED
  PAID
  REMOVED
}

enum ItemState {
  REQUESTED
  VALUATED
  CONFIRMED
  DECLINED
  PURCHASED
}

enum AddressKind {
  BILLING
  SHIPPING
}

enum ShippingMethod {
  INPOST_LOCKER
  INPOST_COURIER
  DPD
  DHL
  POCZTA
}

enum PaymentProvider {
  P24
  MANUAL
  COD
}

enum PaymentStatus {
  INIT
  SUCCEEDED
  FAILED
}

enum NotificationAudience {
  USER
  ADMIN
  STAFF
  GUEST
}

enum NotificationType {
  STATUS_CHANGED
  OFFER_ADDED
  OFFER_UPDATED
  COMMENT_ADDED
  PAYMENT_SUCCEEDED
  PAYMENT_FAILED
  ORDER_REMOVED
  ORDER_RESTORED
}

enum CommentRole {
  USER
  ADMIN
  STAFF
  GUEST
}
